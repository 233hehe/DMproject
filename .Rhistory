<<<<<<< HEAD
appearance = list(rhs=c('PROFITABLE.1=1'),default='lhs'),
control = list(verbose=F))
rules2<-sort(rules,by="confidence",decreasing = TRUE)
inspect(rules[1:5])
summary(rules)
plot(rules[1:5], method="graph")
inspect(rules2[1:5])
summary(rules2)
plot(rules[1:5], method="graph")
subset.matrix <- is.subset(rules, rules)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
rules.pruned <- rules[!redundant]
rules<-rules.pruned
inspect(rules[1:5])
rules<-apriori(asloan[,-8],parameter = list(supp=0.01,conf=0.8),
appearance = list(rhs=c('PROFITABLE=1'),default='lhs'),
control = list(verbose=F))
rules<-sort(rules,by="confidence",decreasing = TRUE)
rules2<-apriori(asloan1,parameter = list(supp=0.1,conf=0.8,maxlen=3),
appearance = list(rhs=c('PROFITABLE.1=1'),default='lhs'),
control = list(verbose=F))
rules2<-sort(rules,by="confidence",decreasing = TRUE)
inspect(rules.pruned[1:5])
inspect(rules[1:5])
summary(rules)
plot(rules[1:5], method="graph",interactive=TRUE,shading=NA)
#
inspect(rules2[1:5])
summary(rules2)
plot(rules[1:5], method="graph")
plot(rules[1:5], method="graph",interactive=TRUE,shading=NA)
plot(rules[1:5], method="graph",interactive=TRUE,shading=NA)
plot(rules[1:5], method="graph",shading=NA)
asloan2<-loan
asloan2<-loan
asloan2$AGE=NULL
asloan2$AMOUNT_REQUESTED=NULL
asloan2$NPV=NULL
asloan2<-data.frame(lapply(asloan2,factor))
rules2<-apriori(asloan2,parameter = list(supp=0.1,conf=0.8),
appearance = list(rhs=c('PROFITABLE=1'),default='lhs'),
control = list(verbose=F))
rules2<-sort(rules,by="confidence",decreasing = TRUE)
inspect(rules[1:5])
summary(rules)
plot(rules[1:5], method="graph")
#
inspect(rules2[1:5])
summary(rules2)
plot(rules[1:5], method="graph")
rules2<-sort(rules,by=c("confidence","lift"),decreasing = TRUE)
inspect(rules[1:5])
summary(rules)
plot(rules[1:5], method="graph")
#
inspect(rules2[1:5])
summary(rules2)
plot(rules[1:5], method="graph")
rules<-apriori(asloan[,-8],parameter = list(supp=0.001,conf=0.8),
appearance = list(rhs=c('PROFITABLE=1'),default='lhs'),
control = list(verbose=F))
inspect(rules[1:5])
summary(rules)
plot(rules[1:5], method="graph")
sum(subset(loan$NPV,loan$SAV_ACCT==3))
sum(npv)
rules<-apriori(asloan[,-8],parameter = list(supp=0.03,conf=0.8),
appearance = list(rhs=c('PROFITABLE=1'),default='lhs'),
control = list(verbose=F))
inspect(rules[1:5])
=======
plot(raw_tree)
text(raw_tree,pretty = 10,cex=0.5)
set.seed(123)
cv.tree <- cv.tree(raw_tree,FUN = prune.misclass,K =10)
names(cv.tree)
plot(cv.tree$size,cv.tree$dev,type="b")
prune.tree=prune.misclass(raw_tree,best=4)
plot(prune.tree)
text(prune.tree,pretty=0)
raw_tree.pred <- predict(raw_tree,data_validation,type = "class")
confusion_raw <- table(data_validation$profit,raw_tree.pred)
confusion_raw
(confusion_raw[1,1]+confusion_raw[2,2])/sum(confusion_raw)
prune_tree.pred <- predict(prune.tree,data_validation,type = "class")
confusion_prune <- table(data_validation$profit,prune_tree.pred)
confusion_prune
(confusion_prune[1,1]+confusion_prune[2,2])/sum(confusion_prune)
tree.pred=predict(prune.tree,data_validation,type="class")
input <- data.frame(27,"1","4",1,12,"1",1,1,"2",0,1,3,0,0,0,1,0,0,"2",4500)
names(input) <- names(data_validation)[-21]
predict(raw_tree,input,type = "vector")
# Error <- c()
# table(data_validation$profit)
# Error[1] <- 0.256
# for (i in 2:10) {
#   prune.profit=prune.misclass(raw_tree,best=i)
#   tree.pred=predict(prune.profit,data_validation,type="class")
#   confusion = table(tree.pred,data_validation$profit)
#   confusion
#   Error[i] = (confusion[1,2]+confusion[2,1])/sum(confusion)
#  }
# plot(1:10,Error,type = "o",xlab="Tree Size",ylab="Error Rate",col="blue")
plot(prune.tree)
text(prune.tree,pretty=0)
cat("CHK_ACCT > 1 is profitable \n")
cat("CHK_ACCT = 0,1 and DURATION <20.5 is profitable \n")
cat("CHK_ACCT = 0,1 and DURATION >20.5 and SAV_ACCT=0,1,2 is nonprofitable \n")
cat("CHK_ACCT = 0,1 and DURATION >20.5 and SAV_ACCT>2 is profitable \n")
reg_tree <- tree(NPV~.,data_trainn)
summary(reg_tree)
plot(reg_tree)
text(reg_tree,pretty = 10,cex=0.5)
Size <- 1:11
Residual <- rep(0,length(Size))
yhat=mean(data_validationn$NPV)
y=data_validationn$NPV
Residual[1]=mean((y-yhat)^2)
for (i in 2:11) {
prune.hitters<-prune.tree(reg_tree,best=i)
yhat<-predict(prune.hitters,newdata=data_validationn)
y<-data_validationn$NPV
Residual[i]<-mean((y-yhat)^2)
}
plot(Size,Residual,type = "o",xlab="Tree Size",ylab="MSE",col="blue")
prune.hitters=prune.tree(reg_tree,best=4)
plot(prune.hitters)
text(prune.hitters,pretty=0)
yhat<-predict(prune.hitters,newdata=data_validationn)
table(yhat)
#Based on your table and the predicted NPV values, how many customers in the validation sample would you extend credit to?
sum(yhat>=0)
#What would be the average profit per customer (that you extend credit to)?
mean(yhat[yhat>=0])
#What is the overall profit for all customers you extend credit to in the validation sample?
sum(yhat)
#How do these values compare with extending credit to everyone?
mean(yhat)
ann <- data.frame("group" = yhat,"value"=data_validationn$NPV)
ann$count <- 1
x <- aggregate(.~group,ann, FUN = sum)
x
s <- sum(x[which(x[,2]>0),3])
s
sum(x[which(x[,2]>0),2])
sum(x[which(x[,2]>0),2]) / s
sum(x[,2])
summary(prune.tree)
summary(prune.hitters)
fit <- lm(NPV~.,data_trainn)
summary(fit)
pre_lm <- predict(fit,data_trainn)
df.lm <- data.frame("predict" = pre_lm, "actual" = data_trainn$NPV)
df.lm <- df.lm[order(-df.lm[,1]),]
addup <- 0
pre <- 0
temp <- 0
for(i in 1:nrow(df.lm)){
if(df.lm[i,2] + temp > addup){
addup <- df.lm[i,2] + temp
pre <- df.lm[i,1]
}
temp <- temp + df.lm[i,2]
}
pre
pre_va = predict(fit, data_validationn)
#Apply the cut-off value to the test sample. How many customers in the test sample would you extend credit to?
v = sum(pre_va>pre)
v
#What would be the average profit per customer (that you extend credit to)?
mean(pre_va[pre_va>pre])
#What is the overall profit for all customers you extend credit to in the validation sample?
sum(pre_va[pre_va>pre])
library(randomForest)
set.seed(1)
bag.boston=randomForest(profit~.,data_train,mtry=20,importance=TRUE)
yhat.bag = predict(bag.boston,newdata=data_validation)
(c = table(data_validation$profit,yhat.bag))
(acc = (c[1,1]+c[2,2])/sum(c))
rf.boston=randomForest(profit~.,data_train,mtry=4,importance=TRUE)
yhat.rf = predict(rf.boston,newdata=data_validation)
(c = table(data_validation$profit,yhat.rf))
(acc = (c[1,1]+c[2,2])/sum(c))
library(gbm)
data_train$profit <- as.numeric(as.character(data_train$profit))
boost.boston=gbm(profit~.,data = data_train,distribution="bernoulli",n.trees=5000,interaction.depth=4)
yhat.boost=predict(boost.boston,newdata = data_validation,n.trees=5000,type="response")
summary(boost.boston)
predicted <- ifelse(yhat.boost>=0.5,1,0)
yhat.test=data_validation$profit
(c = table(yhat.test,predicted))
(acc = (c[1,1]+c[2,2])/sum(c))
239.8109*149
knitr::opts_chunk$set(echo = TRUE)
library(gdata)
credit <- read.xls("credit3.xlsx", sheet = 1, header = T)
credit$OBS. <- NULL
credit$profit <- ifelse(credit$NPV > 0, 1, 0)
library(dummies)
data <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY", "JOB ", "TYPE"), sep = "_")
set.seed(12345)
library(gdata)
credit <- read.xls("credit3.xlsx", sheet = 1, header = T)
credit$OBS. <- NULL
credit$profit <- ifelse(credit$NPV > 0, 1, 0)
library(dummies)
data <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY", "JOB ", "TYPE"), sep = "_")
set.seed(12345)
data
str(data)
loandata = scale(data[,-40:-39])
loandata = scale(data[,-40:-39])
loandata
str(loandata)
loandata = scale(data[,-40:-39])
km.out = kmeans(loandata,5,nstart = 20)
km.out$centers
km.out$cluster
table(km.out$cluster)
str(data)
data$NPV
table(mean(data$NPV),km.out$cluster)
testDF <- data.frame(v1 = c(1,3,5,7,8,3,5,NA,4,5,7,9),
v2 = c(11,33,55,77,88,33,55,NA,44,55,77,99) )
by1 <- c("red", "blue", 1, 2, NA, "big", 1, 2, "red", 1, NA, 12)
by2 <- c("wet", "dry", 99, 95, NA, "damp", 95, 99, "red", 99, NA, NA)
aggregate(x = testDF, by = list(by1, by2), FUN = "mean")
aggregate(data$NPV,by = km.out$cluster, FUN = "mean")
aggregate(data$NPV,by = list(km.out$cluster), FUN = "mean")
loandata = scale(data[,-40:-39])
km.out = kmeans(loandata,5,nstart = 20)
km.out$centers
table(km.out$cluster)
aggregate(data$NPV,by = list(km.out$cluster), FUN = "mean")
km.out = kmeans(loandata,4,nstart = 20)
(table(km.out$cluster))
(aggregate(data$NPV,by = list(km.out$cluster), FUN = "mean"))
km.out = kmeans(loandata,6,nstart = 20)
(table(km.out$cluster))
(aggregate(data$NPV,by = list(km.out$cluster), FUN = "mean"))
View(data)
install.packages("arules")
install.packages("arulesViz")
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","Employment", "JOB "), sep = "_")
str(asdata)
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","Employment", "JOB "), sep = "_")
str(asdata)
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","Employment", "JOB"), sep = "_")
str(asdata)
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","EMPLOYMENT", "JOB"), sep = "_")
str(asdata)
asdata = asdata[,c(-1,-11,-12,-18,-40:-28)]
str(asdata)
rules <- apriori(asdata, parameter = list(supp = 0.001, conf = 0.8))
library(arules)
library(arulesViz)
rules <- apriori(asdata, parameter = list(supp = 0.001, conf = 0.8))
asdata = factor(asdata)
asdata = as.factor(asdata)
class(asdata)
asdata <- lapply(asdata, as.factor)
rules <- apriori(asdata, parameter = list(supp = 0.001, conf = 0.8))
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","EMPLOYMENT", "JOB"), sep = "_")
asdata = asdata[,c(-1,-11,-12,-18,-40:-28)]
library(arules)
library(arulesViz)
asdata <- lapply(asdata, as.factor)
rules <- apriori(asdata, parameter = list(supp = 0.001, conf = 0.8))
asdata
str(asdata)
asdata
itemFrequencyPlot(asdata,topN=15,type="relative")
>>>>>>> origin/master
summary(rules)
str(asdata)
class(asdata)
rules[,-1] <- apriori(asdata, parameter = list(supp = 0.001, conf = 0.8))
asdata[] <- lapply(asdata, as.factor)
class(asdata)
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","EMPLOYMENT", "JOB"), sep = "_")
asdata = asdata[,c(-1,-11,-12,-18,-40:-28)]
library(arules)
library(arulesViz)
asdata[] <- lapply(asdata, factor)
rules <- apriori(asdata, parameter = list(supp = 0.001, conf = 0.8))
#itemFrequencyPlot(asdata,topN=15,type="relative")
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","EMPLOYMENT", "JOB"), sep = "_")
asdata = asdata[,c(-1,-11,-12,-18,-40:-28)]
library(arules)
library(arulesViz)
asdata[] <- lapply(asdata, factor)
rules <- apriori(asdata, parameter = list(supp = 0.2, conf = 0.8))
itemFrequencyPlot(asdata,topN=15,type="relative")
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","EMPLOYMENT", "JOB"), sep = "_")
asdata = asdata[,c(-1,-11,-12,-18,-40:-28)]
library(arules)
library(arulesViz)
asdata[] <=  lapply(asdata, factor)
asdata = data.matrix(asdata)
rules <- apriori(asdata, parameter = list(supp = 0.2, conf = 0.8))
itemFrequencyPlot(asdata,topN=15,type="relative")
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","EMPLOYMENT", "JOB"), sep = "_")
asdata = asdata[,c(-1,-11,-12,-18,-40:-28)]
library(arules)
library(arulesViz)
#asdata[] <=  lapply(asdata, factor)
asdata = data.matrix(asdata)
rules <- apriori(asdata, parameter = list(supp = 0.2, conf = 0.8))
itemFrequencyPlot(asdata,topN=15,type="relative")
asdata = data(asdata)
summary(rules)
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","EMPLOYMENT", "JOB"), sep = "_")
asdata = asdata[,c(-1,-11,-12,-18,-40:-28)]
library(arules)
library(arulesViz)
#asdata[] <=  lapply(asdata, factor)
asdata = data.matrix(asdata)
asdata = data(asdata)
rules<-apriori(data=asdata, parameter=list(supp=0.1,conf = 0.08),
appearance = list(default="lhs",rhs="profitable"),
control = list(verbose=F))
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","EMPLOYMENT", "JOB"), sep = "_")
asdata = asdata[,c(-1,-11,-12,-18,-40:-28)]
library(arules)
library(arulesViz)
#asdata[] <=  lapply(asdata, factor)
asdata = data.matrix(asdata)
asdata = data(asdata)
rules<-apriori(data=asdata, parameter=list(supp=0.1,conf = 0.08), appearance = list(default="lhs",rhs="profitable"),control = list(verbose=F))
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","EMPLOYMENT", "JOB"), sep = "_")
asdata = asdata[,c(-1,-11,-12,-18,-40:-28)]
library(arules)
library(arulesViz)
#asdata[] <=  lapply(asdata, factor)
asdata = data.matrix(asdata)
rules<-apriori(data=asdata, parameter=list(supp=0.1,conf = 0.08), appearance = list(default="lhs",rhs="profitable"),control = list(verbose=F))
str(asdata)
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","EMPLOYMENT", "JOB"), sep = "_")
asdata = asdata[,c(-1,-11,-12,-18,-40:-28)]
library(arules)
library(arulesViz)
asdata[] <=  lapply(asdata, factor)
#asdata = data.matrix(asdata)
rules<-apriori(data=asdata, parameter=list(supp=0.1,conf = 0.08), appearance = list(default="lhs",rhs="profitable"),control = list(verbose=F))
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","EMPLOYMENT", "JOB"), sep = "_")
asdata = asdata[,c(-1,-11,-12,-18,-40:-28)]
library(arules)
library(arulesViz)
asdata[] =  lapply(asdata, factor)
#asdata = data.matrix(asdata)
rules<-apriori(data=asdata, parameter=list(supp=0.1,conf = 0.08), appearance = list(default="lhs",rhs="profitable"),control = list(verbose=F))
str(asdata)
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","EMPLOYMENT", "JOB"), sep = "_")
asdata = asdata[,c(-1,-11,-12,-18,-40:-28)]
library(arules)
library(arulesViz)
asdata[] =  lapply(asdata, factor)
#asdata = data.matrix(asdata)
rules<-apriori(data=asdata, parameter=list(supp=0.1,conf = 0.08), appearance = list(default="lhs",rhs="profit"),control = list(verbose=F))
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","EMPLOYMENT", "JOB"), sep = "_")
asdata = asdata[,c(-1,-11,-12,-18,-40:-28)]
library(arules)
library(arulesViz)
asdata[] =  lapply(asdata, factor)
#asdata = data.matrix(asdata)
rules<-apriori(data=asdata, parameter=list(supp=0.1,conf = 0.08), appearance = list(default="lhs",rhs="asdata_profit"),control = list(verbose=F))
library(datasets)
data("Adult")
test = data("Adult")
test
test[1]
str(test)
Adult
str(Adult)
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","EMPLOYMENT", "JOB"), sep = "_")
asdata = asdata[,c(-1,-11,-12,-18,-40:-28)]
library(arules)
library(arulesViz)
trans <- as(asdata, "transactions")
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","EMPLOYMENT", "JOB"), sep = "_")
asdata = asdata[,c(-1,-11,-12,-18,-40:-28)]
library(arules)
library(arulesViz)
asdata[] =  lapply(asdata, factor)
trans <- as(asdata, "transactions")
inspect(trans)
as(trans, "data.frame")
#asdata[] =  lapply(asdata, factor)
#asdata = data.matrix(asdata)
rules<-apriori(data=asdata, parameter=list(supp=0.1,conf = 0.08), appearance = list(default="lhs",rhs="profit"),control = list(verbose=F))
str(asdata)
rules<-apriori(data=trans, parameter=list(supp=0.1,conf = 0.08), appearance = list(default="lhs",rhs="profit"),control = list(verbose=F))
str(trans)
trans@itemInfo
rules<-apriori(data=trans, parameter=list(supp=0.1,conf = 0.08), appearance = list(default="lhs",rhs="profit=1"),control = list(verbose=F))
rules<-sort(rules, decreasing=TRUE,by="confidence")
inspect(rules[1:5])
knitr::opts_chunk$set(echo = TRUE)
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","EMPLOYMENT","OWN_RES", "JOB"), sep = "_")
knitr::opts_chunk$set(echo = TRUE)
library(gdata)
credit <- read.xls("credit3.xlsx", sheet = 1, header = T)
credit$OBS. <- NULL
credit$profit <- ifelse(credit$NPV > 0, 1, 0)
library(dummies)
data <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY", "JOB", "TYPE"), sep = "_")
set.seed(12345)
loandata = scale(data[,-43:-41])
km.out5 = kmeans(loandata,5,nstart = 20)
km.out5$centers
(table(km.out$cluster))
(table(km.out5$cluster))
(aggregate(data$NPV,by = list(km.out5$cluster), FUN = "mean"))
km.out = kmeans(loandata,4,nstart = 20)
(table(km.out$cluster))
(aggregate(data$NPV,by = list(km.out$cluster), FUN = "mean"))
km.out = kmeans(loandata,6,nstart = 20)
(table(km.out$cluster))
(aggregate(data$NPV,by = list(km.out$cluster), FUN = "mean"))
asdata <- dummy.data.frame(credit,names = c("CHK_ACCT", "SAV_ACCT", "HISTORY","EMPLOYMENT","OWN_RES", "JOB"), sep = "_")
asdata = asdata[,c(-1,-11,-12,-18,-40:-28)]
library(arules)
library(arulesViz)
asdata[] =  lapply(asdata, factor)
trans <- as(asdata, "transactions")
inspect(trans)
as(trans, "data.frame")
#asdata[] =  lapply(asdata, factor)
#asdata = data.matrix(asdata)
rules<-apriori(data=trans, parameter=list(supp=0.1,conf = 0.5), appearance = list(default="lhs",rhs="profit=1"),control = list(verbose=F))
plot(rules, measure=c("support", "lift"), shading="confidence")
rules<-sort(rules, decreasing=TRUE,by="confidence")
inspect(rules[1:5])
rules<-sort(rules, decreasing=TRUE,by="lift")
inspect(rules[1:5])
barplot(table(km.out5$cluster), main="Cluster Distribution", xlab="Number of Cluster")
(table(km.out5$cluster))
barplot(table(km.out5$cluster)/sum(table(km.out5$cluster)), main="Cluster Distribution", xlab="Number of Cluster")
(aggregate(data$NPV,by = list(km.out5$cluster), FUN = "mean"))
(table(km.out5$cluster))
barplot(table(km.out5$cluster)/sum(table(km.out5$cluster)), main="Cluster Distribution", xlab="Number of Cluster",col = "yellow")
(aggregate(data$NPV,by = list(km.out5$cluster), FUN = "mean"))
summary(rules)
<<<<<<< HEAD
plot(rules[1:5], method="graph")
#
inspect(rules2[1:5])
summary(rules2)
plot(rules[1:5], method="graph")
cat("{CHK_ACCT=3,SAV_ACCT=3,HISTORY=4}    => {PROFITABLE=1} \n")
npv<-subset(loan$NPV,loan$CHK_ACCT==3&loan$SAV_ACCT==3&loan$HISTORY==4)
sum(npv)
cat("{SAV_ACCT=3,HISTORY=4,OWN_RES=1}     => {PROFITABLE=1} \n")
sum(subset(loan$NPV,loan$SAV_ACCT==3&loan$HISTORY==4&loan$OWN_RES==1))
cat("{CHK_ACCT=2,EMPLOYMENT=4,JOB=2}      => {PROFITABLE=1} \n")
sum(subset(loan$NPV,loan$CHK_ACCT==2&loan$EMPLOYMENT==4&loan$JOB==2))
cat("{CHK_ACCT=3,SAV_ACCT=4,EMPLOYMENT=3} => {PROFITABLE=1} \n")
sum(subset(loan$NPV,loan$CHK_ACCT==3&loan$SAV_ACCT==4&loan$EMPLOYMENT==3))
cat("{CHK_ACCT=3,EMPLOYMENT=3,JOB=1}      => {PROFITABLE=1} \n")
sum(subset(loan$NPV,loan$CHK_ACCT==3&loan$EMPLOYMENT==3&loan$JOB==1))
cloan<-loan
cloan1<-cloan[,c(2,3,8)]
km.out<-kmeans(cloan1,5,nstart=20)
table(km.out$cluster,loan$PROFITABLE)
aggregate(loan$NPV, by=list(cluster=km.out$cluster), mean)
km.out
cloan2<-asloan
cloan2$CLUSTER<-kmloan$CLUSTER
rules<-apriori(claon2[,-8],parameter = list(supp=0.01,conf=0.8),
appearance = list(rhs=c('PROFITABLE=1'),default='lhs'),
control = list(verbose=F))
cloan2<-asloan
cloan2$CLUSTER<-kmloan$CLUSTER
rules<-apriori(claon2[,-8],parameter = list(supp=0.01,conf=0.8),
appearance = list(rhs=c('PROFITABLE=1'),default='lhs'),
control = list(verbose=F))
rules<-apriori(cloan2[,-8],parameter = list(supp=0.01,conf=0.8),
appearance = list(rhs=c('PROFITABLE=1'),default='lhs'),
control = list(verbose=F))
cloan2$CLUSTER<-as.factor(kmloan$CLUSTER)
rules<-apriori(cloan2[,-8],parameter = list(supp=0.01,conf=0.8),
appearance = list(rhs=c('PROFITABLE=1'),default='lhs'),
control = list(verbose=F))
rules<-sort(rules,by="confidence",decreasing = TRUE)
#based on best association rule to reduce dimension of the kmeans.
cloan<-loan
cloan1<-cloan[,c(2,3,8)]
km.out<-kmeans(cloan1,5,nstart=20)
table(km.out$cluster,loan$PROFITABLE)
aggregate(loan$NPV, by=list(cluster=km.out$cluster), mean)
km.out
#based on the cluster k=5 kmeans to create association rule.
cloan2<-asloan
cloan2$CLUSTER<-as.factor(kmloan$CLUSTER)
rules3<-apriori(cloan2[,-8],parameter = list(supp=0.01,conf=0.8),
appearance = list(rhs=c('PROFITABLE=1'),default='lhs'),
control = list(verbose=F))
rules3<-sort(rules,by="confidence",decreasing = TRUE)
inspect(rules3)
#based on best association rule to reduce dimension of the kmeans.
cloan<-loan
cloan1<-cloan[,c(2,3,8)]
km.out<-kmeans(cloan1,5,nstart=20)
table(km.out$cluster,loan$PROFITABLE)
aggregate(loan$NPV, by=list(cluster=km.out$cluster), mean)
km.out
#based on the cluster k=5 kmeans to create association rule.
cloan2<-asloan
cloan2$CLUSTER<-as.factor(kmloan$CLUSTER)
rules3<-apriori(cloan2[,-8],parameter = list(supp=0.01,conf=0.8),
appearance = list(rhs=c('PROFITABLE=1'),default='lhs'),
control = list(verbose=F))
rules3<-sort(rules,by="confidence",decreasing = TRUE)
inspect(rules3[1:5])
setwd("../GitHub/DMproject/")
library(stringr)
library(dplyr)
library(ggplot2)
#function
sumna<-function(x){
sum(is.na(x))
}
#read data and clear out useless column
company <- read.csv("crunchbase.csv",stringsAsFactors = FALSE,na.strings = c(""," ","NA","Nan"))
c1<-company
c1$X<-NULL
c1$Company.Name.URL<-NULL
c1$Stock.Symbol.URL<-NULL
c1$Crunchbase.Rank<-NULL
c1$Trend.Score..30.Days.<-NULL
c1$Trend.Score..7.Days.<-NULL
c1$Trend.Score..90.Days.<-NULL
#convert to correct data type
c2<-c1
c2$Description<-NULL
c2$Status<-as.factor(c2$Status)
c2$Closed.Date<-as.Date(c2$Closed.Date,format = "%m/%d/%Y")
c2$Founded.Date<-as.Date(c2$Founded.Date,format = "%m/%d/%Y")
c2$Number.of.Articles<-as.numeric(gsub(x=c2$Number.of.Articles,replacement = "",pattern = ","))
c2$Number.of.Employees<-as.factor(c2$Number.of.Employees)
c2$Number.of.Founders[is.na(c2$Number.of.Founders)]<-0
c2$Number.of.Funding.Rounds[is.na(c2$Number.of.Funding.Roundsis.na)]<-0
#
c2$Last.Funding.Date<-as.Date(c2$Last.Funding.Date,format="%m/%d/%Y")
c2$Last.Funding.Amount<-as.numeric(gsub(x=c2$Last.Funding.Amount,replacement = "",pattern = "(\\$|,)"))
c2$Last.Funding.Amount[is.na(c2$Last.Funding.Amount)]<-0
c2$Last.Funding.Type<-as.factor(c2$Last.Funding.Type)
c2$Last.Equity.Funding.Amount<-as.numeric(gsub(x=c2$Last.Equity.Funding.Amount,replacement = "",pattern = "(\\$|,)"))
c2$Last.Equity.Funding.Amount[is.na(c2$Last.Equity.Funding.Amount)]<-0
#
c2$Total.Equity.Funding.Amount<-as.numeric(gsub(x=c2$Total.Equity.Funding.Amount,replacement = "",pattern = "(\\$|,)"))
c2$Total.Equity.Funding.Amount[is.na(c2$Total.Equity.Funding.Amount)]<-0
c2$Total.Funding.Amount<-as.numeric(gsub(x=c2$Total.Funding.Amount,replacement = "",pattern = "(\\$|,)"))
c2$Total.Funding.Amount[is.na(c2$Total.Funding.Amount)]<-0
#
c2$IPO.Date<-as.Date(c2$IPO.Date,format="%m/%d/%Y")
c3<-c2
#Create More Useful Column
apply(c3,2,sumna)
c3$Company.Length<-ifelse(is.na(c3$Closed.Date),Sys.Date()-c3$Founded.Date, c3$Closed.Date-c3$Founded.Date)/365
#
unique(as.vector(str_split(c3$Categories,",",simplify = TRUE)))
category<-data.frame(str_split(c3$Categories,",",simplify = TRUE),stringsAsFactors = FALSE)
unique(as.vector(str_split(c3$Category.Groups,",",simplify=TRUE)))
categorygroup<-data.frame(str_split(c3$Category.Groups,",",simplify=TRUE),stringsAsFactors = FALSE)
#DEFINE SUCCESSFUL IS GOING TO IPO OR FOUNDING ROUNDS >=3 OR ACURIED
for (i in 1:nrow(c3)){
if(!is.na(c3$IPO.Date[i])){
c3$successful[i]=1
}else if(!is.na(c3$Number.of.Funding.Rounds[i])&&c3$Number.of.Funding.Rounds[i]>=3){
c3$successful[i]=1
}else if(c3$Status[i]=="Was Acquired"){
c3$successful[i]=1
}else{
c3$successful[i]=0
}
}
#rearrange column
c4 <- c3 %>%
select(Company.Name,Headquarters.Location,Category.Groups,Categories,Founded.Date,Closed.Date,Company.Length,
Number.of.Employees,Number.of.Founders, Number.of.Articles,Number.of.Investors,Number.of.Lead.Investors,
Number.of.Funding.Rounds,Last.Funding.Date,Last.Funding.Type,Last.Funding.Amount,Last.Equity.Funding.Amount,
Total.Equity.Funding.Amount,Total.Funding.Amount,Stock.Exchange,Stock.Symbol,IPO.Date,Valuation.at.IPO,Money.Raised.at.IPO,
Status,successful)
#exploratory Analysis
cat("funding Rounds >=3 ")
sum(c4$Number.of.Funding.Rounds>=3,na.rm=TRUE)
cat("was acquired")
sum(c4$Status=="Was Acquired")
cat("went to IPO")
sum(!is.na(c4$IPO.Date))
#
qplot(Total.Funding.Amount,data=c4,main="founding rounds distribution",drv=Number.of.Employees)
table(c3$Number.of.Funding.Rounds)
cat("successful rate")
table(c3$successful)[2]/nrow(c4)
=======
temp = list.files(pattern = "*.csv")
myfiles = do.call(rbind,lapply(temp,function(x) read.csv(x, stringsAsFactors = FALSE)))
write.csv(x = myfiles, file = "crunchbase.csv")
y = subset(x = myfiles,(!is.na(myfiles$IPO.Date))&(myfiles$IPO.Date!=""))
z = subset(x=myfiles,myfiles$Total.Funding.Amount!="")
c = subset(x=myfiles,myfiles$Closed.Date!="")
y
z
c
setwd("~/Documents/UMD/2017 spring/Business Process Analysis/DMproject")
data = read.csv("cleaning-1.csv")
str(data)
firstpart = data[data$Status=="IPO"|data$Status=="Was Acquired",]
str(firstpart)
firstpart$Status
data$Founded.Date
strtoi(as.character(data$Founded.Date))
as.character(data$Founded.Date)
strtoi(str_split(as.character(data$Founded.Date),"-")[1])
strtoi(strsplit(as.character(data$Founded.Date),"-")[1])
strsplit(as.character(data$Founded.Date),"-")[1]
strsplit(as.character(data$Founded.Date),"-")[-1][1]
strsplit(as.character(data$Founded.Date),"-")[[1]]
strsplit(as.character(data$Founded.Date),"-")
founddate = strsplit(as.character(data$Founded.Date),"-")
str(founddate)
founddate[:][1]
founddate[][1]
founddate[[]][1]
founddate[[-1]][1]
founddate[[1:length(founddate)]][1]
founddate[[1:length(founddate)]]
length(founddate)
founddate[1:length(founddate)]
founddate[1:length(founddate)][1]
founddate[1:length(founddate),1]
founddate[[1:length(founddate)]]
founddate
str(founddate)
unlist(founddate)
founddate[[1]]
founddate[[1]][1]
founddate[1][1]
founddate[[1:3]]
sapply(founddate, "[[", 1)
sapply(founddate, "[", 1)
founddate[1]
foundyear = as.integer(sapply(founddate, "[", 1))
foundyear
foundyear = as.integer(sapply(founddate, "[", 1)) % 100
foundyear = as.integer(sapply(founddate, "[", 1)) %% 100
foundyear
foundyear = as.integer(sapply(founddate, "[", 1)) - 2012
foundyear
data$foundyear = foundyear
secondpart = data[(data$foundyear>=0&data$Number.of.Funding.Rounds>1)|(data$foundyear<0&data$Number.of.Funding.Rounds>2),0]
secondpart
secondpart = data[(data$foundyear>=0&data$Number.of.Funding.Rounds>1)|(data$foundyear<0&data$Number.of.Funding.Rounds>2),]
secondpart
str(secondpart)
str(firstpart)
6292 + 318
newdata = rbind(firstpart,secondpart)
data = read.csv("cleaning-1.csv")
founddate = strsplit(as.character(data$Founded.Date),"-")
founddate[[1:3]]
foundyear = as.integer(sapply(founddate, "[", 1)) - 2012
data$foundyear = foundyear
firstpart = data[data$Status=="IPO"|data$Status=="Was Acquired",]
firstpart$Status
secondpart = data[(data$foundyear>=0&data$Number.of.Funding.Rounds>1)|(data$foundyear<0&data$Number.of.Funding.Rounds>2),]
newdata = rbind(firstpart,secondpart)
str(newdata)
write.csv(x = newdata, file = "cleaning-2.csv")
str(data)
secondpart
secondpart$Company.Name
test = data[(data$foundyear>=0&data$Number.of.Funding.Rounds>1),]
test$Company.Name
data$Company.Name
test = data[(data$foundyear>=0,]
test = data[data$foundyear>=0,]
test$Company.Name
test = data[(!is.na(myfiles$IPO.Date))&(data$foundyear>=0),]
test = data[(!is.na(data$foundyear))&(data$foundyear>=0),]
test$Company.Name
secondpart = data[(!is.na(data$Number.of.Funding.Rounds))&(data$Number.of.Funding.Rounds>2),]
str(secondpart)
secondpart$Company.Name
thirdpart = data[data$Number.of.Funding.Rounds=2,]
thirdpart = data[data$Number.of.Funding.Rounds==2,]
thirdpart$Company.Name
thirdpart = data[(!is.na(data$Number.of.Funding.Rounds))&(data$Number.of.Funding.Rounds=2),]
thirdpart$Company.Name
thirdpart = data[((!is.na(data$Number.of.Funding.Rounds))&(data$Number.of.Funding.Rounds=2))&((!is.na(data$foundyear))&(data$foundyear>=0)),]
thirdpart$Company.Name
View(test)
View(test)
View(thirdpart)
str(thirdpart)
thirdpart = data[((!is.na(data$Number.of.Funding.Rounds))&(data$Number.of.Funding.Rounds==2))&((!is.na(data$foundyear))&(data$foundyear>=0)),]
thirdpart = data[((!is.na(data$Number.of.Funding.Rounds))&(data$Number.of.Funding.Rounds==2)),]
View(thirdpart)
View(thirdpart)
data = read.csv("cleaning-1.csv")
founddate = strsplit(as.character(data$Founded.Date),"-")
founddate[[1:3]]
foundyear = as.integer(sapply(founddate, "[", 1)) - 2012
data$foundyear = foundyear
thirdpart = data[((!is.na(data$Number.of.Funding.Rounds))&(data$Number.of.Funding.Rounds==2)),]
thirdpart = data[((!is.na(data$Number.of.Funding.Rounds))&(data$Number.of.Funding.Rounds==2))&((!is.na(data$foundyear))&(data$foundyear>=0)),]
data = read.csv("cleaning-1.csv")
data$X = NULL
founddate = strsplit(as.character(data$Founded.Date),"-")
foundyear = as.integer(sapply(founddate, "[", 1)) - 2012
data$foundyear = foundyear
firstpart = data[data$Status=="IPO"|data$Status=="Was Acquired",]
secondpart = data[(!is.na(data$Number.of.Funding.Rounds))&(data$Number.of.Funding.Rounds>2),]
thirdpart = data[((!is.na(data$Number.of.Funding.Rounds))&(data$Number.of.Funding.Rounds==2))&((!is.na(data$foundyear))&(data$foundyear>=0)),]
newdata = rbind(firstpart,secondpart,thirdpart)
write.csv(x = newdata, file = "cleaning-2.csv")
newdata = unique(rbind(firstpart,secondpart,thirdpart)[,2])
newdata = rbind(firstpart,secondpart,thirdpart)
test = unique(newdata[,2])
test
test = unique(newdata[,1])
test
str(newdata)
test = unique(newdata[,1:25])
View(test)
data = read.csv("cleaning-1.csv")
data$X = NULL
founddate = strsplit(as.character(data$Founded.Date),"-")
foundyear = as.integer(sapply(founddate, "[", 1)) - 2012
data$foundyear = foundyear
firstpart = data[data$Status=="IPO"|data$Status=="Was Acquired",]
secondpart = data[(!is.na(data$Number.of.Funding.Rounds))&(data$Number.of.Funding.Rounds>2),]
thirdpart = data[((!is.na(data$Number.of.Funding.Rounds))&(data$Number.of.Funding.Rounds==2))&((!is.na(data$foundyear))&(data$foundyear>=0)),]
newdata = rbind(firstpart,secondpart,thirdpart)
newdata = unique(newdata[,1:25])
write.csv(x = newdata, file = "cleaning-2.csv")
>>>>>>> origin/master
