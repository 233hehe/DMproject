c3$Company.Length<-ifelse(is.na(c3$Closed.Date),Sys.Date()-c3$Founded.Date, c3$Closed.Date-c3$Founded.Date)/365
#
categorylist<-na.omit(unique(as.vector(str_split(c3$Categories,",",simplify = TRUE))))
categorygrouplist<-na.omit(unique(as.vector(str_split(c3$Category.Groups,",",simplify=TRUE))))
#DEFINE SUCCESSFUL IS GOING TO IPO OR FOUNDING ROUNDS >=3 OR ACURIED
for (i in 1:nrow(c3)){
if(!is.na(c3$IPO.Date[i])){
c3$successful[i]=1
}else if(!is.na(c3$Number.of.Funding.Rounds[i])&c3$Number.of.Funding.Rounds[i]>=3){
c3$successful[i]=1
}else if(c3$Status[i]=="Was Acquired"){
c3$successful[i]=1
}else{
c3$successful[i]=0
}
}
#rearrange column
c4 <- c3 %>%
select(Company.Name,Headquarters.Location,Category.Groups,Categories,Founded.Date,Closed.Date,Company.Length,
Number.of.Employees,Number.of.Founders, Number.of.Articles,Number.of.Investors,Number.of.Lead.Investors,
Number.of.Funding.Rounds,Last.Funding.Date,Last.Funding.Type,Last.Funding.Amount,Last.Equity.Funding.Amount,
Total.Equity.Funding.Amount,Total.Funding.Amount,Stock.Exchange,Stock.Symbol,IPO.Date,Valuation.at.IPO,Money.Raised.at.IPO,
Status,successful)
#convert to dummy category
col = as.array(1:7947)
for (i in 1:length(categorygrouplist)){
for (n in 1:nrow(c4)){
col[n]<-ifelse(grepl(categorygrouplist[i],c4$Category.Groups[n]),1,0)
}
names=str_replace_all(string=categorygrouplist[i], pattern=" ", repl="")
c4<-as.data.frame(cbind(c4,col))
colnames(c4)[ncol(c4)] <- names
}
tmp = c4$Headquarters.Location
c4$Headquarters.Location = tmp
c4$Headquarters.Location = strsplit(c4$Headquarters.Location,",")
for(i in 1:nrow(c4)){
c4$Headquarters.Location[i] = str_replace_all(paste(c4$Headquarters.Location[[i]][2],"_",c4$Headquarters.Location[[i]][3]),pattern = " ",repl = "")
}
c4$Headquarters.Location = as.factor(as.character(c4$Headquarters.Location))
library(stringr)
library(dplyr)
library(data.table)
library(ggplot2)
library(imputeMissings)
library(tidyverse)
library(caret)
company <- read.csv("crunchbase.csv",stringsAsFactors = FALSE,na.strings = c(""," ","NA","Nan"))
c1<-company
setwd("~/Documents/UMD/2017 spring/Business Process Analysis/DMproject")
company <- read.csv("crunchbase.csv",stringsAsFactors = FALSE,na.strings = c(""," ","NA","Nan"))
c1<-company
c1$X<-NULL
c1$Company.Name.URL<-NULL
c1$Website<-NULL
c1$Stock.Symbol.URL<-NULL
c1$Crunchbase.Rank<-NULL
c1$Trend.Score..30.Days.<-NULL
c1$Trend.Score..7.Days.<-NULL
c1$Trend.Score..90.Days.<-NULL
#convert to correct data type
c2<-c1
c2$Description<-NULL
c2$Status<-as.factor(c2$Status)
c2$Closed.Date<-as.Date(c2$Closed.Date,format = "%m/%d/%Y")
c2$Founded.Date<-as.Date(c2$Founded.Date,format = "%m/%d/%Y")
c2$Number.of.Articles<-as.numeric(gsub(x=c2$Number.of.Articles,replacement = "",pattern = ","))
c2$Number.of.Employees<-as.factor(c2$Number.of.Employees)
c2$Number.of.Founders<-as.numeric(gsub(x=c2$Number.of.Articles,replacement = "",pattern = ","))
c2$Number.of.Founders[is.na(c2$Number.of.Founders)]<-0
c2$Number.of.Funding.Rounds<-as.numeric(gsub(c2$Number.of.Funding.Rounds,replacement = "",pattern = ","))
c2$Number.of.Funding.Rounds[is.na(c2$Number.of.Funding.Rounds)]<-0
#
c2$Last.Funding.Date<-as.Date(c2$Last.Funding.Date,format="%m/%d/%Y")
c2$Last.Funding.Amount<-as.numeric(gsub(x=c2$Last.Funding.Amount,replacement = "",pattern = "(\\$|,)"))
c2$Last.Funding.Amount[is.na(c2$Last.Funding.Amount)]<-0
c2$Last.Funding.Type<-as.factor(c2$Last.Funding.Type)
c2$Last.Equity.Funding.Amount<-as.numeric(gsub(x=c2$Last.Equity.Funding.Amount,replacement = "",pattern = "(\\$|,)"))
c2$Last.Equity.Funding.Amount[is.na(c2$Last.Equity.Funding.Amount)]<-0
#
c2$Total.Equity.Funding.Amount<-as.numeric(gsub(x=c2$Total.Equity.Funding.Amount,replacement = "",pattern = "(\\$|,)"))
c2$Total.Equity.Funding.Amount[is.na(c2$Total.Equity.Funding.Amount)]<-0
c2$Total.Funding.Amount<-as.numeric(gsub(x=c2$Total.Funding.Amount,replacement = "",pattern = "(\\$|,)"))
c2$Total.Funding.Amount[is.na(c2$Total.Funding.Amount)]<-0
#
c2$IPO.Date<-as.Date(c2$IPO.Date,format="%m/%d/%Y")
c3<-c2
#Create More Useful Column
apply(c3,2,sumna)
c3$Company.Length<-ifelse(is.na(c3$Closed.Date),Sys.Date()-c3$Founded.Date, c3$Closed.Date-c3$Founded.Date)/365
#
categorylist<-na.omit(unique(as.vector(str_split(c3$Categories,",",simplify = TRUE))))
categorygrouplist<-na.omit(unique(as.vector(str_split(c3$Category.Groups,",",simplify=TRUE))))
#DEFINE SUCCESSFUL IS GOING TO IPO OR FOUNDING ROUNDS >=3 OR ACURIED
for (i in 1:nrow(c3)){
if(!is.na(c3$IPO.Date[i])){
c3$successful[i]=1
}else if(!is.na(c3$Number.of.Funding.Rounds[i])&c3$Number.of.Funding.Rounds[i]>=3){
c3$successful[i]=1
}else if(c3$Status[i]=="Was Acquired"){
c3$successful[i]=1
}else{
c3$successful[i]=0
}
}
#rearrange column
c4 <- c3 %>%
select(Company.Name,Headquarters.Location,Category.Groups,Categories,Founded.Date,Closed.Date,Company.Length,
Number.of.Employees,Number.of.Founders, Number.of.Articles,Number.of.Investors,Number.of.Lead.Investors,
Number.of.Funding.Rounds,Last.Funding.Date,Last.Funding.Type,Last.Funding.Amount,Last.Equity.Funding.Amount,
Total.Equity.Funding.Amount,Total.Funding.Amount,Stock.Exchange,Stock.Symbol,IPO.Date,Valuation.at.IPO,Money.Raised.at.IPO,
Status,successful)
#convert to dummy category
col = as.array(1:7947)
for (i in 1:length(categorygrouplist)){
for (n in 1:nrow(c4)){
col[n]<-ifelse(grepl(categorygrouplist[i],c4$Category.Groups[n]),1,0)
}
names=str_replace_all(string=categorygrouplist[i], pattern=" ", repl="")
c4<-as.data.frame(cbind(c4,col))
colnames(c4)[ncol(c4)] <- names
}
tmp = c4$Headquarters.Location
c4$Headquarters.Location = tmp
c4$Headquarters.Location = strsplit(c4$Headquarters.Location,",")
for(i in 1:nrow(c4)){
c4$Headquarters.Location[i] = str_replace_all(paste(c4$Headquarters.Location[[i]][2],"_",c4$Headquarters.Location[[i]][3]),pattern = " ",repl = "")
}
c4$Headquarters.Location = as.factor(as.character(c4$Headquarters.Location))
rf = c4[,c(8:12,26:109)]
rf$successful = as.factor(rf$successful)
rf[(is.na(rf$Number.of.Employees)),"Number.of.Employees"] = "1-10"
rf[(is.na(rf$Number.of.Founders)),"Number.of.Founders"] = mean(rf$Number.of.Founders)
rf[(is.na(rf$Number.of.Articles)),"Number.of.Articles"] = mean(rf[!(is.na(rf$Number.of.Articles)),"Number.of.Articles"])
rf[(is.na(rf$Number.of.Investors)),"Number.of.Investors"] = mean(rf[!(is.na(rf$Number.of.Investors)),"Number.of.Investors"])
rf[(is.na(rf$Number.of.Lead.Investors)),"Number.of.Lead.Investors"] = mean(rf[!(is.na(rf$Number.of.Lead.Investors)),"Number.of.Lead.Investors"])
#rf[(is.na(rf$Number.of.Funding.Rounds)),"Number.of.Funding.Rounds"] = mean(rf[!(is.na(rf$Number.of.Funding.Rounds)),"Number.of.Funding.Rounds"])
library(randomForest)
model <- randomForest(successful~., data=rf, ntree=1000, keep.forest=FALSE,importance=TRUE)
plot(model, log="y")
varImpPlot(model)
rf = c4[,c(8:12,26:109)]
rf$successful = as.factor(rf$successful)
rf[(is.na(rf$Number.of.Employees)),"Number.of.Employees"] = "1-10"
rf[(is.na(rf$Number.of.Founders)),"Number.of.Founders"] = mean(rf$Number.of.Founders)
rf[(is.na(rf$Number.of.Articles)),"Number.of.Articles"] = mean(rf[!(is.na(rf$Number.of.Articles)),"Number.of.Articles"])
rf[(is.na(rf$Number.of.Investors)),"Number.of.Investors"] = mean(rf[!(is.na(rf$Number.of.Investors)),"Number.of.Investors"])
rf[(is.na(rf$Number.of.Lead.Investors)),"Number.of.Lead.Investors"] = mean(rf[!(is.na(rf$Number.of.Lead.Investors)),"Number.of.Lead.Investors"])
#rf[(is.na(rf$Number.of.Funding.Rounds)),"Number.of.Funding.Rounds"] = mean(rf[!(is.na(rf$Number.of.Funding.Rounds)),"Number.of.Funding.Rounds"])
library(randomForest)
model <- randomForest(successful~., data=rf, ntree=1000, keep.forest=FALSE,importance=TRUE)
plot(model, log="y")
varImpPlot(model)
model$confusion
library(stringr)
library(dplyr)
library(data.table)
library(ggplot2)
library(imputeMissings)
library(tidyverse)
library(caret)
library(stringr)
library(dplyr)
library(data.table)
library(ggplot2)
library(imputeMissings)
library(tidyverse)
library(caret)
company <- read.csv("crunchbase.csv",stringsAsFactors = FALSE,na.strings = c(""," ","NA","Nan"))
c1<-company
c1$X<-NULL
c1$Company.Name.URL<-NULL
c1$Website<-NULL
c1$Stock.Symbol.URL<-NULL
c1$Crunchbase.Rank<-NULL
c1$Trend.Score..30.Days.<-NULL
c1$Trend.Score..7.Days.<-NULL
c1$Trend.Score..90.Days.<-NULL
#convert to correct data type
c2<-c1
c2$Description<-NULL
c2$Status<-as.factor(c2$Status)
c2$Closed.Date<-as.Date(c2$Closed.Date,format = "%m/%d/%Y")
c2$Founded.Date<-as.Date(c2$Founded.Date,format = "%m/%d/%Y")
c2$Number.of.Articles<-as.numeric(gsub(x=c2$Number.of.Articles,replacement = "",pattern = ","))
c2$Number.of.Employees<-as.factor(c2$Number.of.Employees)
c2$Number.of.Founders<-as.numeric(gsub(x=c2$Number.of.Articles,replacement = "",pattern = ","))
c2$Number.of.Founders[is.na(c2$Number.of.Founders)]<-0
c2$Number.of.Funding.Rounds<-as.numeric(gsub(c2$Number.of.Funding.Rounds,replacement = "",pattern = ","))
c2$Number.of.Funding.Rounds[is.na(c2$Number.of.Funding.Rounds)]<-0
#
c2$Last.Funding.Date<-as.Date(c2$Last.Funding.Date,format="%m/%d/%Y")
c2$Last.Funding.Amount<-as.numeric(gsub(x=c2$Last.Funding.Amount,replacement = "",pattern = "(\\$|,)"))
c2$Last.Funding.Amount[is.na(c2$Last.Funding.Amount)]<-0
c2$Last.Funding.Type<-as.factor(c2$Last.Funding.Type)
c2$Last.Equity.Funding.Amount<-as.numeric(gsub(x=c2$Last.Equity.Funding.Amount,replacement = "",pattern = "(\\$|,)"))
c2$Last.Equity.Funding.Amount[is.na(c2$Last.Equity.Funding.Amount)]<-0
#
c2$Total.Equity.Funding.Amount<-as.numeric(gsub(x=c2$Total.Equity.Funding.Amount,replacement = "",pattern = "(\\$|,)"))
c2$Total.Equity.Funding.Amount[is.na(c2$Total.Equity.Funding.Amount)]<-0
c2$Total.Funding.Amount<-as.numeric(gsub(x=c2$Total.Funding.Amount,replacement = "",pattern = "(\\$|,)"))
c2$Total.Funding.Amount[is.na(c2$Total.Funding.Amount)]<-0
#
c2$IPO.Date<-as.Date(c2$IPO.Date,format="%m/%d/%Y")
c3<-c2
#Create More Useful Column
apply(c3,2,sumna)
c3$Company.Length<-ifelse(is.na(c3$Closed.Date),Sys.Date()-c3$Founded.Date, c3$Closed.Date-c3$Founded.Date)/365
#
categorylist<-na.omit(unique(as.vector(str_split(c3$Categories,",",simplify = TRUE))))
categorygrouplist<-na.omit(unique(as.vector(str_split(c3$Category.Groups,",",simplify=TRUE))))
#DEFINE SUCCESSFUL IS GOING TO IPO OR FOUNDING ROUNDS >=3 OR ACURIED
for (i in 1:nrow(c3)){
if(!is.na(c3$IPO.Date[i])){
c3$successful[i]=1
}else if(!is.na(c3$Number.of.Funding.Rounds[i])&c3$Number.of.Funding.Rounds[i]>=3){
c3$successful[i]=1
}else if(c3$Status[i]=="Was Acquired"){
c3$successful[i]=1
}else{
c3$successful[i]=0
}
}
#rearrange column
c4 <- c3 %>%
select(Company.Name,Headquarters.Location,Category.Groups,Categories,Founded.Date,Closed.Date,Company.Length,
Number.of.Employees,Number.of.Founders, Number.of.Articles,Number.of.Investors,Number.of.Lead.Investors,
Number.of.Funding.Rounds,Last.Funding.Date,Last.Funding.Type,Last.Funding.Amount,Last.Equity.Funding.Amount,
Total.Equity.Funding.Amount,Total.Funding.Amount,Stock.Exchange,Stock.Symbol,IPO.Date,Valuation.at.IPO,Money.Raised.at.IPO,
Status,successful)
#convert to dummy category
col = as.array(1:7947)
for (i in 1:length(categorygrouplist)){
for (n in 1:nrow(c4)){
col[n]<-ifelse(grepl(categorygrouplist[i],c4$Category.Groups[n]),1,0)
}
names=str_replace_all(string=categorygrouplist[i], pattern=" ", repl="")
c4<-as.data.frame(cbind(c4,col))
colnames(c4)[ncol(c4)] <- names
}
tmp = c4$Headquarters.Location
c4$Headquarters.Location = tmp
c4$Headquarters.Location = strsplit(c4$Headquarters.Location,",")
for(i in 1:nrow(c4)){
c4$Headquarters.Location[i] = str_replace_all(c4$Headquarters.Location[[i]][3],pattern = " ",repl = "")
}
c4$Headquarters.Location
c4$Headquarters.Location = as.factor(as.character(c4$Headquarters.Location))
c4$Headquarters.Location
rf <- dummy.data.frame(rf,names = c("Headquarters.Location"), sep = "_")
library(dummies)
library(dummies)
rf <- dummy.data.frame(rf,names = c("Headquarters.Location"), sep = "_")
rf <- dummy.data.frame(rf,names = "Headquarters.Location", sep = "_")
rff <- dummy.data.frame(rf,names = "Headquarters.Location", sep = "_")
View(rf)
rf = c4[,c(2,8:12,26:109)]
rff <- dummy.data.frame(rf,names = "Headquarters.Location", sep = "_")
rf <- dummy.data.frame(rf,names = "Headquarters.Location", sep = "_")
rf$successful = as.factor(rf$successful)
rf[(is.na(rf$Number.of.Employees)),"Number.of.Employees"] = "1-10"
rf[(is.na(rf$Number.of.Founders)),"Number.of.Founders"] = mean(rf$Number.of.Founders)
rf[(is.na(rf$Number.of.Articles)),"Number.of.Articles"] = mean(rf[!(is.na(rf$Number.of.Articles)),"Number.of.Articles"])
rf[(is.na(rf$Number.of.Investors)),"Number.of.Investors"] = mean(rf[!(is.na(rf$Number.of.Investors)),"Number.of.Investors"])
rf[(is.na(rf$Number.of.Lead.Investors)),"Number.of.Lead.Investors"] = mean(rf[!(is.na(rf$Number.of.Lead.Investors)),"Number.of.Lead.Investors"])
#rf[(is.na(rf$Number.of.Funding.Rounds)),"Number.of.Funding.Rounds"] = mean(rf[!(is.na(rf$Number.of.Funding.Rounds)),"Number.of.Funding.Rounds"])
library(randomForest)
model <- randomForest(successful~., data=rf, ntree=1000, keep.forest=FALSE,importance=TRUE)
plot(model, log="y")
varImpPlot(model)
rf$Headquarters.Location_Slovakia(SlovakRepublic)
rf$Headquarters.Location_Africa
rf$`Headquarters.Location_Slovakia(SlovakRepublic)`=NULL
model <- randomForest(successful~., data=rf, ntree=1000, keep.forest=FALSE,importance=TRUE)
model$confusion
c4 <- c3 %>%
select(Company.Name,Headquarters.Location,Category.Groups,Categories,Founded.Date,Closed.Date,Company.Length,
Number.of.Employees,Number.of.Founders, Number.of.Articles,Number.of.Investors,Number.of.Lead.Investors,
Number.of.Funding.Rounds,Last.Funding.Date,Last.Funding.Type,Last.Funding.Amount,Last.Equity.Funding.Amount,
Total.Equity.Funding.Amount,Total.Funding.Amount,Stock.Exchange,Stock.Symbol,IPO.Date,Valuation.at.IPO,Money.Raised.at.IPO,
Status,successful)
col = as.array(1:7947)
for (i in 1:length(categorygrouplist)){
for (n in 1:nrow(c4)){
col[n]<-ifelse(grepl(categorygrouplist[i],c4$Category.Groups[n]),1,0)
}
names=str_replace_all(string=categorygrouplist[i], pattern=" ", repl="")
c4<-as.data.frame(cbind(c4,col))
colnames(c4)[ncol(c4)] <- names
}
tmp = c4$Headquarters.Location
c4$Headquarters.Location = tmp
c4$Headquarters.Location = strsplit(c4$Headquarters.Location,",")
for(i in 1:nrow(c4)){
c4$Headquarters.Location[i] = str_replace_all(c4$Headquarters.Location[[i]][3],pattern = " ",repl = "")
}
c4$Headquarters.Location = as.factor(as.character(c4$Headquarters.Location))
rf = c4[,c(2,8:12,16,17,26:109)]
rf = c4[,c(2,8:12,16:19,26:109)]
library(dummies)
rf <- dummy.data.frame(rf,names = "Headquarters.Location", sep = "_")
rf$successful = as.factor(rf$successful)
rf[(is.na(rf$Number.of.Employees)),"Number.of.Employees"] = "1-10"
rf[(is.na(rf$Number.of.Founders)),"Number.of.Founders"] = mean(rf$Number.of.Founders)
rf[(is.na(rf$Number.of.Articles)),"Number.of.Articles"] = mean(rf[!(is.na(rf$Number.of.Articles)),"Number.of.Articles"])
rf[(is.na(rf$Number.of.Investors)),"Number.of.Investors"] = mean(rf[!(is.na(rf$Number.of.Investors)),"Number.of.Investors"])
rf[(is.na(rf$Number.of.Lead.Investors)),"Number.of.Lead.Investors"] = mean(rf[!(is.na(rf$Number.of.Lead.Investors)),"Number.of.Lead.Investors"])
rf[(is.na(rf$Last.Equity.Funding.Amount)),"Last.Equity.Funding.Amount"] = mean(rf[!(is.na(rf$Last.Equity.Funding.Amount)),"Last.Equity.Funding.Amount"])
rf[(is.na(rf$Last.Funding.Amount)),"Last.Funding.Amount"] = mean(rf[!(is.na(rf$Last.Funding.Amount)),"Last.Funding.Amount"])
rf[(is.na(rf$Total.Funding.Amount)),"Total.Funding.Amount"] = mean(rf[!(is.na(rf$Total.Funding.Amount)),"Total.Funding.Amount"])
rf[(is.na(rf$Total.Equity.Funding.Amount)),"Total.Equity.Funding.Amount"] = mean(rf[!(is.na(rf$Total.Equity.Funding.Amount)),"Total.Equity.Funding.Amount"])
#rf[(is.na(rf$Number.of.Funding.Rounds)),"Number.of.Funding.Rounds"] = mean(rf[!(is.na(rf$Number.of.Funding.Rounds)),"Number.of.Funding.Rounds"])
library(randomForest)
model <- randomForest(successful~., data=rf, ntree=1000, keep.forest=FALSE,importance=TRUE)
rf$`Headquarters.Location_Slovakia(SlovakRepublic)`=NULL
model <- randomForest(successful~., data=rf, ntree=1000, keep.forest=FALSE,importance=TRUE)
View(rf)
model$confusion
rf = c4[,c(2,8:12,16:19,26:109)]
rf$successful = as.factor(rf$successful)
rf[(is.na(rf$Number.of.Employees)),"Number.of.Employees"] = "1-10"
rf[(is.na(rf$Number.of.Founders)),"Number.of.Founders"] = mean(rf$Number.of.Founders)
rf[(is.na(rf$Number.of.Articles)),"Number.of.Articles"] = mean(rf[!(is.na(rf$Number.of.Articles)),"Number.of.Articles"])
rf[(is.na(rf$Number.of.Investors)),"Number.of.Investors"] = mean(rf[!(is.na(rf$Number.of.Investors)),"Number.of.Investors"])
rf[(is.na(rf$Number.of.Lead.Investors)),"Number.of.Lead.Investors"] = mean(rf[!(is.na(rf$Number.of.Lead.Investors)),"Number.of.Lead.Investors"])
rf[(is.na(rf$Last.Equity.Funding.Amount)),"Last.Equity.Funding.Amount"] = mean(rf[!(is.na(rf$Last.Equity.Funding.Amount)),"Last.Equity.Funding.Amount"])
rf[(is.na(rf$Last.Funding.Amount)),"Last.Funding.Amount"] = mean(rf[!(is.na(rf$Last.Funding.Amount)),"Last.Funding.Amount"])
rf[(is.na(rf$Total.Funding.Amount)),"Total.Funding.Amount"] = mean(rf[!(is.na(rf$Total.Funding.Amount)),"Total.Funding.Amount"])
rf[(is.na(rf$Total.Equity.Funding.Amount)),"Total.Equity.Funding.Amount"] = mean(rf[!(is.na(rf$Total.Equity.Funding.Amount)),"Total.Equity.Funding.Amount"])
#rf[(is.na(rf$Number.of.Funding.Rounds)),"Number.of.Funding.Rounds"] = mean(rf[!(is.na(rf$Number.of.Funding.Rounds)),"Number.of.Funding.Rounds"])
library(randomForest)
model <- randomForest(successful~., data=rf, ntree=500, keep.forest=FALSE,importance=TRUE)
rf = c4[,c(8:12,16:19,26:109)]
rf$successful = as.factor(rf$successful)
rf[(is.na(rf$Number.of.Employees)),"Number.of.Employees"] = "1-10"
rf[(is.na(rf$Number.of.Founders)),"Number.of.Founders"] = mean(rf$Number.of.Founders)
rf[(is.na(rf$Number.of.Articles)),"Number.of.Articles"] = mean(rf[!(is.na(rf$Number.of.Articles)),"Number.of.Articles"])
rf[(is.na(rf$Number.of.Investors)),"Number.of.Investors"] = mean(rf[!(is.na(rf$Number.of.Investors)),"Number.of.Investors"])
rf[(is.na(rf$Number.of.Lead.Investors)),"Number.of.Lead.Investors"] = mean(rf[!(is.na(rf$Number.of.Lead.Investors)),"Number.of.Lead.Investors"])
rf[(is.na(rf$Last.Equity.Funding.Amount)),"Last.Equity.Funding.Amount"] = mean(rf[!(is.na(rf$Last.Equity.Funding.Amount)),"Last.Equity.Funding.Amount"])
rf[(is.na(rf$Last.Funding.Amount)),"Last.Funding.Amount"] = mean(rf[!(is.na(rf$Last.Funding.Amount)),"Last.Funding.Amount"])
rf[(is.na(rf$Total.Funding.Amount)),"Total.Funding.Amount"] = mean(rf[!(is.na(rf$Total.Funding.Amount)),"Total.Funding.Amount"])
rf[(is.na(rf$Total.Equity.Funding.Amount)),"Total.Equity.Funding.Amount"] = mean(rf[!(is.na(rf$Total.Equity.Funding.Amount)),"Total.Equity.Funding.Amount"])
#rf[(is.na(rf$Number.of.Funding.Rounds)),"Number.of.Funding.Rounds"] = mean(rf[!(is.na(rf$Number.of.Funding.Rounds)),"Number.of.Funding.Rounds"])
library(randomForest)
model <- randomForest(successful~., data=rf, ntree=500, keep.forest=FALSE,importance=TRUE)
model$confusion
library(e1071)
library(e1071)
naive <- naiveBayes(successful~., data=rf)
naive$tables
naive$apriori
naive$levels
prediction <- predict(naive, newdata = dfvalidation[,-10])
prediction <- predict(naive, newdata = rf[,-10])
table(rf$successful,prediction,dnn=list('actual','predicted'))
model$confusion
(table[1,1]/sum(table[1,]))
(table[1,1]/sum(table[1,1]))
(table[1,1])
naive_t = table(rf$successful,prediction,dnn=list('actual','predicted'))
(naive_t[1,1])
(naive_t[1,1]/sum(naive_t[1,]))
(naive_t[1,2]/sum(naive_t[1,]))
(naive_t[1,2]/sum(naive_t[1,]))
(naive_t[2,1]/sum(naive_t[2,]))
((naive_t[1,1]+naive_t[2,2])/sum(naive_t))
naivedata = rf
naivedata$Headquarters.Location = c4$Headquarters.Location
naivedata = rf
naivedata$Headquarters.Location = c4$Headquarters.Location
naive <- naiveBayes(successful~., data=naivedata)
prediction <- predict(naive, newdata = naivedata[,-10])
naive_t = table(rf$successful,prediction,dnn=list('actual','predicted'))
(naive_t[1,2]/sum(naive_t[1,]))
(naive_t[2,1]/sum(naive_t[2,]))
((naive_t[1,1]+naive_t[2,2])/sum(naive_t))
plot(model, log="y")
varImpPlot(model)
naive_t
322/(322+948)
model$confusion
model$votes
library(ROCR)
library(ROCR)
predictions=as.vector(model$votes[,2])
pred=prediction(predictions,rf$successful)
perf_AUC=performance(pred,"auc") #Calculate the AUC value
AUC=perf_AUC@y.values[[1]]
perf_ROC=performance(pred,"tpr","fpr") #plot the actual ROC curve
plot(perf_ROC, main="ROC plot")
text(0.5,0.5,paste("AUC = ",format(AUC, digits=5, scientific=FALSE)))
predictions=as.vector(model$votes[,2])
pred=prediction(predictions,rf$successful)
perf_AUC=performance(pred,"auc") #Calculate the AUC value
AUC=perf_AUC@y.values[[1]]
perf_ROC=performance(pred,"tpr","fpr") #plot the actual ROC curve
plot(perf_ROC, main="ROC plot")
text(0.5,0.5,paste("AUC = ",format(AUC, digits=5, scientific=FALSE)))
plot(perf_ROC, main="ROC plot",colorize =true)
plot(perf_ROC, main="ROC plot",colorize =true)
plot(perf_ROC, main="ROC plot",colorize =T)
pre_bayes <- predict(naive, newdata = naivedata[,-10],type = "raw")
pre_b <- prediction(pre_bayes[,2],naivedata$successful)
per_bayes_p <- performance(pre_b,"tpr","fpr")
plot(per_bayes_p,color ="yellow",add=T)
plot(per_bayes_p,color ="blue",add=T)
pre_bayes
library(gbm)
library(gbm)
boost=gbm(successful~.,data=naivedata,distribution="bernoulli",n.trees=5000,interaction.depth=4)
summary(boost)
boost$valid.error
summary(boost)
summary(naivedata)
boost=gbm(successful~.,data=naivedata,distribution="bernoulli",n.trees=5000,interaction.depth=4)
View(naivedata)
summary(boost)
boostdata = naivedata
boostdata[(is.na(boostdata$Headquarters.Location)),"Headquarters.Location"] = "others"
levels(boostdata$Headquarters.Location)
tmp = levels(boostdata$Headquarters.Location)
levels(boostdata$Headquarters.Location) = c(tmp,"others")
boostdata[(is.na(boostdata$Headquarters.Location)),"Headquarters.Location"] = "others"
boost=gbm(successful~.,data=naivedata,distribution="bernoulli",n.trees=5000,interaction.depth=4)
summary(boost)
summary(boostdata$Headquarters.Location)
par(mfrow=c(1,2))
summary(boost)
boost=gbm(successful~.,data=boostdata,distribution="bernoulli",n.trees=5000,interaction.depth=4)
summary(boost)
yhat.boost=predict(boost,newdata=boostdata,n.trees=5000,type="response")
yhat.boost
boost=gbm(successful~Number.of.Founders+Number.of.Employees.,data=boostdata,distribution="bernoulli",n.trees=5000,interaction.depth=4)
boost=gbm(successful~Number.of.Founders+Number.of.Employees,data=boostdata,distribution="bernoulli",n.trees=5000,interaction.depth=4)
summary(boost)
boost=gbm(successful~Number.of.Founders,data=boostdata,distribution="bernoulli",n.trees=5000,interaction.depth=4)
summary(boost)
boost=gbm(successful~Apps,data=boostdata,distribution="bernoulli",n.trees=5000,interaction.depth=4)
summary(boost)
boost=gbm(successful~successful,data=boostdata,distribution="bernoulli",n.trees=5000,interaction.depth=4)
summary(boost)
boostdata$successful
count(boostdata$successful == NULL)
count(is.na(boostdata$successful))
is.na(boostdata$successful))
is.na(boostdata$successful)
anyNA(data)(boostdata$successful)
anyNA(boostdata$successful)
boost=gbm(successful~successful,data=boostdata,distribution="bernoulli",n.trees=5000,interaction.depth=2)
summary(boost)
boost=gbm(successful~apps,data=boostdata,distribution="bernoulli",n.trees=5000,interaction.depth=2)
boost=gbm(successful~Apps,data=boostdata,distribution="bernoulli",n.trees=5000,interaction.depth=2)
summary(boost)
boostdata$successful<-ifelse(boostdata$successful==1,1,0)
boost=gbm(successful~Apps,data=boostdata,distribution="bernoulli",n.trees=5000,interaction.depth=2)
summary(boost)
boost=gbm(successful~.,data=boostdata,distribution="bernoulli",n.trees=5000,interaction.depth=2)
summary(boost)
par(mfrow=c(1,2))
yhat.boost=predict(boost,newdata=boostdata,n.trees=5000,type="response")
yhat.boost
pre_boost <- prediction(yhat.boost,boostdata$successful)
per_boost_p <- performance(pre_boost,"tpr","fpr")
plot(per_boost_p,color ="blue",add=T)
plot(per_boost_p,color ="blue",add=T)
plot(per_boost_p,color ="blue",add=T)
plot(perf_ROC, main="ROC plot",colorize =T)
text(0.5,0.5,paste("AUC = ",format(AUC, digits=5, scientific=FALSE)))
plot(per_bayes_p,color ="blue",add=T)
plot(per_boost_p,color ="blue",add=T)
plot(perf_ROC, main="ROC plot",colorize =T)
text(0.5,0.5,paste("AUC = ",format(AUC, digits=5, scientific=FALSE)))
plot(per_bayes_p,col ="blue",add=T)
plot(per_boost_p,col ="yellow",add=T)
plot(perf_ROC, main="ROC plot",colorize =T)
text(0.5,0.5,paste("AUC = ",format(AUC, digits=5, scientific=FALSE)))
plot(per_bayes_p,col ="blue",add=T)
plot(per_boost_p,col ="red",add=T)
pred_boost <- prediction(yhat.boost, boostdata$successful)
perf_boost <- performance(pred_boost,"cost",cost.fp=1,cost.fn=1.4285)
plot(perf_boost, col="orange",main="Startup Classfication")
cutoff<- perf_boost@x.values[[1]][(which.min(perf_boost@y.values[[1]]))]
cutoff
boost_table = table(boostdata$successful,class_boost,dnn=list('actual','predicted'))
class_boost = ifelse(yhat.boost>boost_cutoff,1,0)
boost_cutoff<- perf_boost@x.values[[1]][(which.min(perf_boost@y.values[[1]]))]
class_boost = ifelse(yhat.boost>boost_cutoff,1,0)
boost_table = table(boostdata$successful,class_boost,dnn=list('actual','predicted'))
boost_table
(boost_table)
perf_b <- performance(pre_b,"cost",cost.fp=1,cost.fn=1.4285)
plot(perf_b, col="orange",main="Startup Classfication")
naive_cutoff<- perf_b@x.values[[1]][(which.min(perf_b@y.values[[1]]))]
class_naive = ifelse(yhat.boost[,2]>boost_cutoff,1,0)
naive_table = table(naivedata$successful,class_naive,dnn=list('actual','predicted'))
(naive_table)
yhat.boost[,2]
perf_b <- performance(pre_b,"cost",cost.fp=1,cost.fn=1.4285)
plot(perf_b, col="orange",main="Startup Classfication")
naive_cutoff<- perf_b@x.values[[1]][(which.min(perf_b@y.values[[1]]))]
class_naive = ifelse(pre_bayes[,2]>boost_cutoff,1,0)
naive_table = table(naivedata$successful,class_naive,dnn=list('actual','predicted'))
(naive_table)
pre_rf=as.vector(model$votes[,2])
pre_rf <- prediction(as.vector(model$votes[,2]),rf$successful)
perf_rf <- performance(pre_rf,"cost",cost.fp=1,cost.fn=1.4285)
plot(perf_rf, col="orange",main="Startup Classfication")
rf_cutoff<- perf_rf@x.values[[1]][(which.min(perf_rf@y.values[[1]]))]
class_rf = ifelse(model$votes[,2]>rf_cutoff,1,0)
rf_table = table(rf$successful,class_rf,dnn=list('actual','predicted'))
(rf_table)
